version: 2.1

orbs:
  aws-eks: circleci/aws-eks@1.1.0
  kubernetes: circleci/kubernetes@1.3.0
  aws-ecr: circleci/aws-ecr@7.3.0

jobs:
    run-lint:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout
        - run:
            name: install dependencies
            command: |            
              make install
        - run:
            name: run lint
            command: |
              make lint

    build-push-image:
      docker:
        - image: circleci/node:13.8.0
      steps:
        - checkout

        - setup_remote_docker:
            version: 19.03.13

        - run:
            name: Building Image
            command: |
              export TAG=uda-capstone
              export IMAGE_NAME=uda-capstone
              docker build -t abhishekraghav08/$IMAGE_NAME:$TAG .
              docker container ls

        - run:
            name: Push Docker Image to Docker Hub
            command: |
              export TAG=uda-capstone
              export IMAGE_NAME=uda-capstone
              docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD 
              docker build -t abhishekraghav08/$IMAGE_NAME:$TAG .
                          docker container ls
              docker push abhishekraghav08/$IMAGE_NAME:$TAG
            
    create-capston-cluster:
      executor: aws-eks/python3
      steps:
        - checkout    
        - aws-eks/install-aws-iam-authenticator:
            release-tag: ''
        - run:
            name: Install the eksctl tool
            command: |
              if which eksctl > /dev/null; then
                echo "eksctl is already installed"
                exit 0
              fi
              mkdir -p eksctl_download
              curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" \
                | tar xz -C eksctl_download
              chmod +x eksctl_download/eksctl
              SUDO=""
              if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
                SUDO="sudo"
              fi
              $SUDO mv eksctl_download/eksctl /usr/local/bin/
              rmdir eksctl_download     

        - aws-eks/create-cluster:
            cluster-name: udacity-capstone-project-blue
            aws-region: $AWS_DEFAULT_REGION
            skip-kubectl-install: false
            verbose: 3
            node-type: t2.micro
            nodes-max: 1
            ssh-access: false
            ssh-public-key: ''

    deploy-capston-app:
      executor: aws-eks/python3
      parameters:
        docker-image-name:
          description: |
            Docker image for Capstone Project
          type: string
        version-info:
          description: |
            Capstone Version information
          type: string
      steps:
        - checkout
        - aws-eks/update-kubeconfig-with-authenticator:
            cluster-name: udacity-capstone-project-blue
            install-kubectl: true
            aws-region: $AWS_DEFAULT_REGION
        - kubernetes/create-or-update-resource:
            resource-file-path: deployment.yml
            resource-name: deployment/uda-capstone
        - kubernetes/create-or-update-resource:
            resource-file-path: deployment.yml

    test-capston-app:
        executor: aws-eks/python3
        parameters:
          expected-version-info:
            description: |
              test capston version 
            type: string

        steps:
          - aws-eks/update-kubeconfig-with-authenticator:
              cluster-name: udacity-capstone-project-blue
              install-kubectl: true
              aws-region: $AWS_DEFAULT_REGION
          - run:
              name: Wait
              command: |
                kubectl get pods
                kubectl get services

    undeploy-capston-app:
      executor: aws-eks/python3
      steps:
        - aws-eks/update-kubeconfig-with-authenticator:
            cluster-name: udacity-capstone-project-blue
            install-kubectl: true
            aws-region: $AWS_DEFAULT_REGION
        - kubernetes/delete-resource:
            resource-types: "deployment,service"
            label-selector: "app=uda-capstone"
            wait: true
        - run:
            name: Pod status
            command: |
              kubectl get pods

    delete-capston-cluster:
      executor: aws-eks/python3
      steps:
        - checkout
        - aws-eks/install-aws-iam-authenticator:
            release-tag: ''
        - run:
            name: Install the eksctl tool
            command: |
              if which eksctl > /dev/null; then
                echo "eksctl is already installed"
                exit 0
              fi
              mkdir -p eksctl_download
              curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" \
                | tar xz -C eksctl_download
              chmod +x eksctl_download/eksctl
              SUDO=""
              if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
                SUDO="sudo"
              fi
              $SUDO mv eksctl_download/eksctl /usr/local/bin/
              rmdir eksctl_download        
    
        - aws-eks/delete-cluster:
            cluster-name: udacity-capstone-project-blue
            aws-region: $AWS_DEFAULT_REGION
            wait: true
workflows:
  default:
    jobs:
      - run-lint
      - build-push-image:
          requires:
            - run-lint
      - aws-ecr/build-and-push-image:
          name: build-and-push-image-capston
          account-url: AWS_ECR_URL
          region: AWS_DEFAULT_REGION
          create-repo: true
          repo: udacity_capstone_project
          dockerfile: Dockerfile
          path: .
          tag: ${CIRCLE_SHA1}
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          requires:
            - run-lint
      - create-capston-cluster:
          requires:
            - build-and-push-image-capston
      - deploy-capston-app:
          docker-image-name: "${AWS_ECR_URL}/udacity_capstone_project:${CIRCLE_SHA1}"
          version-info: "${CIRCLE_SHA1}"
          requires:
            - create-capston-cluster
      - test-capston-app:
          expected-version-info: "${CIRCLE_SHA1}"
          requires:
            - deploy-capston-app
 
#      - undeploy-capston-app:
#          requires:
#            - test-capston-app
#      - delete-capston-cluster:
#          requires:
#            - undeploy-capston-app